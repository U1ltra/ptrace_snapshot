From 4adb68d152a48653cb6829a08d550556c8053e97 Mon Sep 17 00:00:00 2001
From: U1ltra <jiaruil3@cmu.edu>
Date: Thu, 19 Sep 2024 12:10:34 -0400
Subject: [PATCH] Add selective memory snapshotting feature to ptrace

---
 include/linux/sched.h       |   9 +-
 include/uapi/linux/ptrace.h |   3 +
 kernel/ptrace.c             | 340 ++++++++++++++++++++++++++++++++++++
 3 files changed, 351 insertions(+), 1 deletion(-)

diff --git a/include/linux/sched.h b/include/linux/sched.h
index 3613c3f43..551e7fdc4 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -64,6 +64,10 @@ struct task_delay_info;
 struct task_group;
 struct io_uring_task;
 
+struct snapshot_list {
+    struct list_head head;       // Head of the list of snapshots
+};
+
 /*
  * Task state bitmask. NOTE! These bits are also
  * encoded in fs/proc/array.c: get_task_state().
@@ -1070,6 +1074,9 @@ struct task_struct {
 	unsigned long			ptrace_message;
 	kernel_siginfo_t		*last_siginfo;
 
+	size_t total_snapshot_size;  // Track the total size of all snapshots for this tracee
+	struct snapshot_list 	snapshots;
+
 	struct task_io_accounting	ioac;
 #ifdef CONFIG_PSI
 	/* Pressure stall state */
@@ -2091,4 +2098,4 @@ int sched_trace_rq_nr_running(struct rq *rq);
 
 const struct cpumask *sched_trace_rd_span(struct root_domain *rd);
 
-#endif
+#endif
\ No newline at end of file
diff --git a/include/uapi/linux/ptrace.h b/include/uapi/linux/ptrace.h
index 83ee45fa6..a1dea43ed 100644
--- a/include/uapi/linux/ptrace.h
+++ b/include/uapi/linux/ptrace.h
@@ -142,5 +142,8 @@ struct ptrace_syscall_info {
 
 #include <asm/ptrace.h>
 
+#define PTRACE_SNAPSHOT     0x5001
+#define PTRACE_RESTORE      0x5002
+#define PTRACE_GETSNAPSHOT  0x5003
 
 #endif /* _UAPI_LINUX_PTRACE_H */
diff --git a/kernel/ptrace.c b/kernel/ptrace.c
index aab480e24..7cc390cf6 100644
--- a/kernel/ptrace.c
+++ b/kernel/ptrace.c
@@ -34,6 +34,29 @@
 
 #include <asm/syscall.h>	/* for syscall_get_* */
 
+
+// Define snapshot limits
+#define MAX_SNAPSHOT_LEN 1024   // Maximum length of a single snapshot (e.g., 1024 bytes)
+#define MAX_TOTAL_SNAPSHOT_SIZE (10 * 1024)  // Maximum total size of all snapshots for a tracee (e.g., 10 KB)
+
+/* 
+  Data structures and functions for the snapshot feature
+ */
+struct snapshot {
+    void *data;                  // Pointer to the snapshot data in kernel space
+    unsigned long addr;          // Start address of the memory region in user space
+    size_t length;               // Length of the memory region
+    struct list_head list;       // Linked list node to keep track of multiple snapshots
+};
+
+// Initialize a list head for storing snapshots for each process
+void initialize_snapshot_list(struct task_struct *child) {
+	printk(KERN_INFO "--- Initializing snapshot list for PID %d ---\n", child->pid);
+	printk(KERN_ALERT "Reached line %d in function %s\n", __LINE__, __func__);
+
+    INIT_LIST_HEAD(&child->snapshots.head);
+}
+
 /*
  * Access another process' address space via ptrace.
  * Source/target buffer must be kernel space,
@@ -396,6 +419,8 @@ static int ptrace_attach(struct task_struct *task, long request,
 {
 	bool seize = (request == PTRACE_SEIZE);
 	int retval;
+	printk(KERN_INFO "--- ptrace_attach ---");
+	printk(KERN_ALERT "Reached line %d in function %s\n", __LINE__, __func__);
 
 	retval = -EIO;
 	if (seize) {
@@ -452,6 +477,9 @@ static int ptrace_attach(struct task_struct *task, long request,
 
 	ptrace_link(task, current);
 
+	initialize_snapshot_list(task);
+	task->total_snapshot_size = 0;  // Initialize total snapshot size
+
 	/* SEIZE doesn't trap tracee on attach */
 	if (!seize)
 		send_sig_info(SIGSTOP, SEND_SIG_PRIV, task);
@@ -511,6 +539,7 @@ static int ptrace_attach(struct task_struct *task, long request,
 static int ptrace_traceme(void)
 {
 	int ret = -EPERM;
+	printk(KERN_INFO "--- ptrace_traceme ---\n");
 
 	write_lock_irq(&tasklist_lock);
 	/* Are we already being traced? */
@@ -524,6 +553,10 @@ static int ptrace_traceme(void)
 		if (!ret && !(current->real_parent->flags & PF_EXITING)) {
 			current->ptrace = PT_PTRACED;
 			ptrace_link(current, current->real_parent);
+
+			// Initialize the snapshot-related fields
+			initialize_snapshot_list(current);
+			current->total_snapshot_size = 0;  // Initialize total snapshot size
 		}
 	}
 	write_unlock_irq(&tasklist_lock);
@@ -562,9 +595,17 @@ static int ignoring_children(struct sighand_struct *sigh)
 static bool __ptrace_detach(struct task_struct *tracer, struct task_struct *p)
 {
 	bool dead;
+    struct snapshot *snap, *tmp;
 
 	__ptrace_unlink(p);
 
+	// Delete all snapshots associated with this tracee
+    list_for_each_entry_safe(snap, tmp, &p->snapshots.head, list) {
+        list_del(&snap->list);   // Remove the snapshot from the list
+        kfree(snap->data);       // Free the snapshot data
+        kfree(snap);             // Free the snapshot structure
+    }
+
 	if (p->exit_state != EXIT_ZOMBIE)
 		return false;
 
@@ -1035,6 +1076,18 @@ int ptrace_request(struct task_struct *child, long request,
 	void __user *datavp = (void __user *) data;
 	unsigned long __user *datalp = datavp;
 	unsigned long flags;
+	struct snapshot *snap, *tmp;
+	unsigned char *snap_data, *snap_data_tmp;
+	size_t length;
+	int copied;
+	unsigned char i;
+
+	// print all arguments
+	printk(KERN_ALERT "--- ptrace_request ---\n");
+	printk(KERN_ALERT "Reached line %d in function %s\n", __LINE__, __func__);
+	printk(KERN_ALERT "request: %ld\n", request);
+	printk(KERN_ALERT "addr: %lx\n", addr);
+	printk(KERN_ALERT "data: %lx\n", data);
 
 	switch (request) {
 	case PTRACE_PEEKTEXT:
@@ -1043,6 +1096,275 @@ int ptrace_request(struct task_struct *child, long request,
 	case PTRACE_POKETEXT:
 	case PTRACE_POKEDATA:
 		return generic_ptrace_pokedata(child, addr, data);
+	
+	/* TODO: check the multiple snapshot case */
+	case PTRACE_SNAPSHOT:
+		length = (size_t) data;	// Assuming 'data' is the length of the memory region
+		printk(KERN_ALERT "--- PTRACE_SNAPSHOT ---\n");
+		printk(KERN_ALERT "Reached line %d in function %s\n", __LINE__, __func__);
+		printk(KERN_ALERT "length: %lx\n", length);
+
+		// Check if the requested snapshot length exceeds the maximum allowed size
+		if (length > MAX_SNAPSHOT_LEN) {
+			ret = -EFBIG;  // Snapshot size too large
+			break;
+		}
+		// Check if adding this snapshot would exceed the total allowed size for this tracee
+		if (child->total_snapshot_size + length > MAX_TOTAL_SNAPSHOT_SIZE) {
+			ret = -ENOMEM;  // Total snapshot size limit exceeded
+			break;
+		}
+		printk(KERN_ALERT "child->total_snapshot_size: %lx\n", child->total_snapshot_size);
+
+		// Check if the memory region is valid and writable
+		{
+			struct mm_struct *mm;
+			struct vm_area_struct *vma;
+
+			// Get the memory management structure of the tracee
+			mm = get_task_mm(child);
+			if (!mm) {
+				ret = -EINVAL;  // No memory management structure (e.g., kernel threads)
+				break;
+			}
+
+			// Lock the memory to safely access the VMAs (using mmap semaphore)
+			down_read(&mm->mmap_lock);
+
+			// Find the VMA that contains the start address 'addr'
+			vma = find_vma(mm, addr);
+			printk(KERN_ALERT "vma->vm_start: %lx\n", vma->vm_start);
+			printk(KERN_ALERT "vma->vm_end: %lx\n", vma->vm_end);
+			if (!vma || addr < vma->vm_start || addr + length > vma->vm_end) {
+				// Invalid memory range
+				up_read(&mm->mmap_lock);
+				ret = -EFAULT;  // Invalid memory range
+				break;
+			}
+
+			// Check if the VMA is writable
+			printk(KERN_ALERT "vma->vm_flags: %lx\n", vma->vm_flags);
+			printk(KERN_ALERT "vma->vm_flags & VM_WRITE: %lx\n", vma->vm_flags & VM_WRITE);
+			if (!(vma->vm_flags & VM_WRITE)) {
+				// Memory region is not writable
+				up_read(&mm->mmap_lock);
+				ret = -EACCES;  // Access denied
+				break;
+			}
+
+			// Release the mmap semaphore
+			up_read(&mm->mmap_lock);
+		}
+
+		printk(KERN_ALERT "Memory region is valid and writable.\n");
+
+		// Allocate kernel space to store the snapshot
+		snap = kmalloc(sizeof(struct snapshot), GFP_KERNEL);
+		if (!snap) {
+			ret = -ENOMEM;  // Memory allocation failure
+			break;
+		}
+		printk(KERN_ALERT "snap kmalloc\n");
+
+		snap->data = kmalloc(length, GFP_KERNEL);
+		if (!snap->data) {
+			kfree(snap);
+			ret = -ENOMEM;  // Memory allocation failure
+			break;
+		}
+		printk(KERN_ALERT "snap->data kmalloc\n");
+
+		// Copy the snapshot data from the child's memory space
+		// read length bytes from the child's memory space starting at addr
+		copied = ptrace_access_vm(child, addr, snap->data, length, FOLL_FORCE);
+		printk(KERN_ALERT "copied: %x\n", copied);
+		if (copied != length) {
+			kfree(snap->data);
+			kfree(snap);
+			ret = -EIO;  // Memory access failure
+			break;
+		}
+		printk(KERN_ALERT "snap->data copied\n");
+		
+
+		snap->length = length;
+		snap->addr = addr;
+		printk(KERN_ALERT "snap->length: %lx\n", snap->length);
+		printk(KERN_ALERT "snap->addr: %lx\n", snap->addr);
+
+		// TODO: if the snapshot already exists for the same address, delete the old one
+		// Search for the snapshot corresponding to the given address
+		list_for_each_entry(tmp, &child->snapshots.head, list) {
+			if (addr >= tmp->addr && addr < tmp->addr + tmp->length) {
+				printk(KERN_ALERT "Snapshot already exists for the same address.\n");
+				printk(KERN_ALERT "Deleting the old snapshot.\n");
+				// Snapshot already exists for the same address
+				// Delete the old snapshot
+				list_del(&tmp->list);  // Remove the snapshot from the list
+				kfree(tmp->data);      // Free the snapshot data
+				kfree(tmp);            // Free the snapshot structure
+				break;
+			}
+		}
+
+		// Initialize the list head
+		INIT_LIST_HEAD(&snap->list);
+		// Add the snapshot to the list, still in the kernel space
+		// just moving the dynamic memory address around
+		list_add(&snap->list, &child->snapshots.head);
+		printk(KERN_ALERT "snap->list update\n");
+
+		// Update the total snapshot size for the tracee
+    	child->total_snapshot_size += length;
+		printk(KERN_ALERT "child->total_snapshot_size: %lx\n", child->total_snapshot_size);
+
+		// print the snapshot data
+		snap_data = (unsigned char *)snap->data;
+		for (i = 0; i < length; i++) {
+			printk(KERN_ALERT "snap->data[%d]: %x\n", i, snap_data[i]);
+		}
+		// print the snapshot list
+		list_for_each_entry(tmp, &child->snapshots.head, list) {
+			printk(KERN_ALERT "tmp->length: %lx\n", tmp->length);
+			printk(KERN_ALERT "tmp->addr: %lx\n", tmp->addr);
+
+			snap_data_tmp = (unsigned char *)tmp->data;
+			for (i = 0; i < tmp->length; i++) {
+				printk(KERN_ALERT "tmp->data[%d]: %x\n", i, snap_data_tmp[i]);
+			}
+		}
+		
+		ret = 0;
+		break;
+
+	case PTRACE_RESTORE:
+	{
+		struct snapshot *snap = NULL;
+		struct snapshot *tmp;
+		struct mm_struct *mm;
+		struct vm_area_struct *vma;
+		int copied;
+
+		printk(KERN_ALERT "--- PTRACE_RESTORE ---\n");
+
+		// Search for the snapshot corresponding to the given address
+		list_for_each_entry(tmp, &child->snapshots.head, list) {
+			// TODO: restore snapshot when the address falls within the range of a addr - addr + length
+			if (addr >= tmp->addr && addr < tmp->addr + tmp->length) {
+				snap = tmp;
+				break;
+			}
+		}
+
+		printk(KERN_ALERT "Snapshot found.\n");
+
+		if (!snap) {
+			ret = -ENOENT;  // No snapshot found for the specified address
+			break;
+		}
+
+		printk(KERN_ALERT "snap->addr: %lx\n", snap->addr);
+		printk(KERN_ALERT "snap->length: %lx\n", snap->length);
+
+		{
+			// Get the memory management structure of the tracee
+			mm = get_task_mm(child);
+			if (!mm) {
+				ret = -EINVAL;  // No memory management structure (e.g., kernel threads)
+				break;
+			}
+
+			// Lock the memory to safely access the VMAs (using mmap semaphore)
+			down_read(&mm->mmap_lock);
+
+			// Find the VMA that contains the start address 'addr'
+			vma = find_vma(mm, addr);
+			if (!vma || addr < vma->vm_start || addr + snap->length > vma->vm_end) {
+				// Invalid memory range
+				up_read(&mm->mmap_lock);
+				ret = -EFAULT;  // Invalid memory range
+				break;
+			}
+
+			// Check if the VMA is writable
+			if (!(vma->vm_flags & VM_WRITE)) {
+				// Memory region is not writable
+				up_read(&mm->mmap_lock);
+				ret = -EACCES;  // Access denied
+				break;
+			}
+
+			// Release the mmap semaphore
+			up_read(&mm->mmap_lock);
+		}
+
+		printk(KERN_ALERT "Memory region is valid and writable.\n");
+
+		// Now write the snapshot data back to the tracee's memory space
+		copied = ptrace_access_vm(child, addr, snap->data, snap->length, 
+			FOLL_FORCE | FOLL_WRITE);
+
+		printk(KERN_ALERT "copied: %x\n", copied);
+
+		if (copied != snap->length) {
+			ret = -EIO;  // Memory write failure
+			break;
+		}
+
+		printk(KERN_ALERT "PTRACE_RESTORE completed for address %lx\n", addr);
+
+		// TODO: verify if the deletion is successful
+		// Successfully restored, now delete the snapshot
+		list_del(&snap->list);  // Remove the snapshot from the list 
+		kfree(snap->data);      // Free the memory used for snapshot data
+		kfree(snap);            // Free the snapshot structure itself
+
+		printk(KERN_ALERT "Snapshot deleted after restore.\n");
+
+		ret = 0;
+		break;
+	}
+	case PTRACE_GETSNAPSHOT:
+	{
+		struct snapshot *snap = NULL;
+		struct snapshot *tmp;
+		void __user *user_buf = (void __user *)data;  // User-provided buffer address
+
+		printk(KERN_ALERT "--- PTRACE_GETSNAPSHOT ---\n");
+
+		// Search for the snapshot corresponding to the given address (addr)
+		list_for_each_entry(tmp, &child->snapshots.head, list) {
+			if (addr >= tmp->addr && addr < tmp->addr + tmp->length) {
+				snap = tmp;
+				break;
+			}
+		}
+
+		printk(KERN_ALERT "Snapshot found.\n");
+
+		if (!snap) {
+			ret = -ENOENT;  // No snapshot found for the specified address
+			break;
+		}
+
+		// Ensure the snapshot length is not larger than the user-provided buffer
+		// Here, length is already stored in snap->length
+		printk(KERN_ALERT "Snapshot addr: %lx\n", snap->addr);
+		printk(KERN_ALERT "Snapshot length: %lu\n", snap->length);
+
+		// Copy the snapshot data from kernel space to user space
+		if (copy_to_user(user_buf, snap->data, snap->length)) {
+			ret = -EFAULT;  // Failed to copy data to user space
+			break;
+		}
+
+		printk(KERN_ALERT "PTRACE_GETSNAPSHOT: Snapshot data copied to user buffer.\n");
+
+		// Successfully copied the snapshot to the user buffer
+		ret = 0;
+		break;
+	}
+
 
 #ifdef PTRACE_OLDSETOPTIONS
 	case PTRACE_OLDSETOPTIONS:
@@ -1270,6 +1592,14 @@ SYSCALL_DEFINE4(ptrace, long, request, long, pid, unsigned long, addr,
 {
 	struct task_struct *child;
 	long ret;
+	printk(KERN_ALERT "--- ptrace syscall ---\n");
+	printk(KERN_ALERT "Reached line %d in function %s\n", __LINE__, __func__);
+
+	printk(KERN_INFO "ptrace syscall called with:\n");
+    printk(KERN_INFO "  request = %ld\n", request);
+    printk(KERN_INFO "  pid     = %ld\n", pid);
+    printk(KERN_INFO "  addr    = %lx\n", addr);  // Printing address in hex
+    printk(KERN_INFO "  data    = %lx\n", data);  // Printing data in hex
 
 	if (request == PTRACE_TRACEME) {
 		ret = ptrace_traceme();
@@ -1315,6 +1645,11 @@ int generic_ptrace_peekdata(struct task_struct *tsk, unsigned long addr,
 {
 	unsigned long tmp;
 	int copied;
+	printk(KERN_ALERT "--- generic_ptrace_peekdata ---\n");
+	printk(KERN_ALERT "Reached line %d in function %s\n", __LINE__, __func__);
+	// print all arguments
+	printk(KERN_ALERT "addr: %lx\n", addr);
+	printk(KERN_ALERT "data: %lx\n", data);
 
 	copied = ptrace_access_vm(tsk, addr, &tmp, sizeof(tmp), FOLL_FORCE);
 	if (copied != sizeof(tmp))
@@ -1326,6 +1661,11 @@ int generic_ptrace_pokedata(struct task_struct *tsk, unsigned long addr,
 			    unsigned long data)
 {
 	int copied;
+	printk(KERN_ALERT "--- generic_ptrace_pokedata ---\n");
+	printk(KERN_ALERT "Reached line %d in function %s\n", __LINE__, __func__);
+	// print all arguments
+	printk(KERN_ALERT "addr: %lx\n", addr);
+	printk(KERN_ALERT "data: %lx\n", data);
 
 	copied = ptrace_access_vm(tsk, addr, &data, sizeof(data),
 			FOLL_FORCE | FOLL_WRITE);
-- 
2.39.3 (Apple Git-146)

